{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-a823e98ceff45a41.js","src/index.ts","src/form.ts","src/state.ts","node_modules/@parcel/runtime-js/lib/runtime-2aee020012d63f1f.js","src/list.ts","node_modules/@parcel/runtime-js/lib/runtime-b92034d34a8a07a5.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $fb30cdf8f3a320df$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"dZpbI\\\",\\\"index.cb7188b1.js\\\",\\\"70bT3\\\",\\\"wall.133e2c4a.jpg\\\",\\\"5SW54\\\",\\\"del_img.36c7340d.png\\\"]\"));\n\nconst $0b89d474933103bc$export$ca000e230c0caa3e = {\n    data: {\n        list: []\n    },\n    listeners: [],\n    getState () {\n        return this.data;\n    },\n    setState (newState) {\n        this.data = newState;\n        for (const cb of this.listeners)cb();\n        console.log(\"Soy el state, he cambiado \", this.data);\n        console.log(document.querySelector(\"my-list\"));\n    },\n    subscribe (callback) {\n        this.listeners.push(callback);\n    },\n    addItem (item) {\n        const cs = this.getState();\n        cs.list.push([\n            item,\n            \"pending\",\n            \"notselected\"\n        ]);\n        this.setState(cs);\n    }\n};\n\n\nvar $6a72bf350332f9dc$exports = {};\n$6a72bf350332f9dc$exports = new URL(\"wall.133e2c4a.jpg\", import.meta.url).toString();\n\n\nclass $1763b227c722b862$var$ComponentForm extends HTMLElement {\n    constructor(){\n        super(), this.shadow = this.attachShadow({\n            mode: \"open\"\n        });\n        this.render();\n    }\n    connectedCallback() {\n        let form = this.shadow.querySelector(\".form\");\n        form?.addEventListener(\"submit\", (e)=>{\n            e.preventDefault();\n            e.stopPropagation();\n            const f = e.target;\n            const input = f.querySelector(\"input\");\n            (0, $0b89d474933103bc$export$ca000e230c0caa3e).addItem(input.value);\n        });\n    }\n    render() {\n        this.shadow.innerHTML = `\n            <style>\n                form {\n                    width:100%;\n                    display:flex;\n                    flex-direction:row;\n                    gap:10px;\n                    justify-content: center;\n                }\n                input {\n                    background-color: white;\n                    border: 2px solid;\n                    border-radius:5px;\n                    color: black;\n                    width:200px;\n                }\n                input::placeholder{\n                    color:black;\n                    font-weight: bold;\n                    opacity:0.7; \n                    padding-left:5px;\n                }\n                button {\n                    background-color: blue;\n                    border-radius: 5px;\n                    font-weight: bold;\n                    color:white;\n                }\n                @media (width>960px){\n                    input{\n                        width:400px;\n                        height:30px;\n                    }\n                    button{\n                        width:100px;\n                        height:35px;\n                    }\n                }\n            </style>\n            <form class=\"form\">\n                <input type=\"text\" placeholder=\"Write a new activity\" class=\"input-activity\">\n                <button>ADD</button>\n            </form>`;\n    }\n}\ncustomElements.define(\"my-form\", $1763b227c722b862$var$ComponentForm);\n\n\n\nvar $61a14b74f35e54f8$exports = {};\n$61a14b74f35e54f8$exports = new URL(\"del_img.36c7340d.png\", import.meta.url).toString();\n\n\nclass $d0f18d7cc08194e8$var$ComponentList extends HTMLElement {\n    constructor(){\n        super(), this.shadow = this.attachShadow({\n            mode: \"open\"\n        });\n        this.render();\n    }\n    connectedCallback() {\n        (0, $0b89d474933103bc$export$ca000e230c0caa3e).subscribe(()=>{\n            this.render();\n            this.checkStatus();\n            this.deletePostit();\n        });\n    }\n    deletePostit() {\n        let deleteImage = this.shadow.querySelectorAll(\".postit\");\n        for (const element of deleteImage || []){\n            const indexDiv = Number(element.id);\n            const imgElement = element.querySelector(\"img\");\n            imgElement?.addEventListener(\"click\", (e)=>{\n                e.preventDefault();\n                const f = e.target;\n                const listOG = (0, $0b89d474933103bc$export$ca000e230c0caa3e).getState().list;\n                const listOG2 = listOG.filter((_, index)=>index !== indexDiv);\n                (0, $0b89d474933103bc$export$ca000e230c0caa3e).setState({\n                    \"list\": listOG2\n                });\n            });\n        }\n    }\n    checkStatus() {\n        const list = (0, $0b89d474933103bc$export$ca000e230c0caa3e).getState().list;\n        const mylistcontainer = document.querySelector(\"my-list\");\n        const shadowroot = mylistcontainer?.shadowRoot;\n        const postitdiv = shadowroot?.querySelectorAll(\".postit\");\n        for (const element of postitdiv || [])if (element.classList.contains(\"postit\")) {\n            const checkbox = element.querySelector(\"input\");\n            const postitText = element.querySelector(\".postit-text\");\n            const deleteImage = element.querySelector(\"img\");\n            const indexN = element.id;\n            if (list[indexN][1] == \"checked\") checkbox.checked = true; //Keep checked after render\n            checkbox?.addEventListener(\"change\", (e)=>{\n                e.stopPropagation();\n                if (checkbox.checked) {\n                    element.classList.add(\"checked\"); // Add class \"checked\"\n                    postitText?.classList.add(\"checked\"); // Add class \"checked\"\n                    element.classList.remove(\"pending\"); // Remove class \"pending\"\n                    postitText?.classList.remove(\"pending\"); // Remove class \"pending\"\n                    list[indexN][1] = \"checked\";\n                } else {\n                    element.classList.add(\"pending\"); // Add class \"pending\"\n                    postitText?.classList.add(\"pending\"); // Add class \"pending\"\n                    element.classList.remove(\"checked\"); // Remove class \"checked\"\n                    postitText?.classList.remove(\"checked\"); // Remove class \"checked\"\n                    list[indexN][1] = \"pending\";\n                }\n            });\n            function resetPostitSelection() {\n                for (const elem of postitdiv || [])if (elem.classList.contains(\"selected\")) {\n                    elem?.classList.remove(\"selected\");\n                    elem?.classList.add(\"notselected\");\n                    const delIMG = elem.querySelector(\"img\");\n                    delIMG.style.visibility = \"hidden\";\n                }\n                for (const elem of list)elem[2] = \"notselected\";\n            }\n            element?.addEventListener(\"click\", (e)=>{\n                e.stopPropagation();\n                if (element.classList.contains(\"notselected\")) {\n                    resetPostitSelection();\n                    element?.classList.remove(\"notselected\");\n                    element?.classList.add(\"selected\");\n                    deleteImage.style.visibility = \"visible\";\n                    list[indexN][2] = \"selected\";\n                } else if (element.classList.contains(\"selected\")) resetPostitSelection();\n            });\n        }\n    }\n    render() {\n        const list = (0, $0b89d474933103bc$export$ca000e230c0caa3e).getState().list;\n        let n = -1;\n        this.shadow.innerHTML = `\n            <style>\n                div.postit{\n                    margin:0;\n                    padding:0;\n                    width:100%;\n                    height:100px;\n                    background-color:rgb(247, 245, 159);\n                    border: solid black 2px;\n                    border-radius:15px;\n                    display: flex;\n                    justify-content: space-between;                    \n                    }\n                div.postit-text{\n                    width:70%;\n                    height:100%;\n                    padding:10px;\n                    overflow-y: auto; \n                    word-wrap: break-word; \n                    white-space: normal; \n                    display: block; \n                    margin: 0; \n                    line-height: 1.5;\n                    text-align: start;\n                    box-sizing:border-box;\n                    justify-content: center;                                        \n                    \n                }\n                div.postit-check-delete{\n                    display:flex;\n                    flex-direction:column;\n                    justify-content: space-between;                                        \n                    height:100%;\n                    width:auto;\n                    padding: 4%;\n                    box-sizing:border-box;\n                }\n                input[type=\"checkbox\"]{\n                    width:20px;\n                    height:20px;\n                    margin:0;\n                }\n                div.checked{\n                    background-color:grey;\n                    text-decoration: line-through;\n                }\n                div.selected{\n                    border: solid black 5px;\n                }\n                div.notselected{\n                    border: solid black 2px;\n                }\n                img.notselected{\n                    visibility:hidden;\n                }\n\n\n            </style>\n            ${list.map((element)=>{\n            var status = element[1];\n            if (n < list.length) n++;\n            return `\n                <div class=\"postit ${status} ${element[2]}\" id=\"${n}\">\n                    <div class=\"postit-text ${status}\" id=\"${n}\">\n                        ${element[0]}\n                    </div>\n                    \n                    <div class=\"postit-check-delete\">\n                        <input type=\"checkbox\">\n                        <img class=\"${element[2]}\" src=\"${0, (/*@__PURE__*/$parcel$interopDefault($61a14b74f35e54f8$exports))}\" alt=\"del img\" width=\"20px\" height=\"20px\">\n                    </div>\n                </div>\n                            `;\n        }).join(\"\")}`;\n    }\n}\ncustomElements.define(\"my-list\", $d0f18d7cc08194e8$var$ComponentList);\n\n\n\n\n//# sourceMappingURL=index.cb7188b1.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"dZpbI\\\",\\\"index.cb7188b1.js\\\",\\\"70bT3\\\",\\\"wall.133e2c4a.jpg\\\",\\\"5SW54\\\",\\\"del_img.36c7340d.png\\\"]\"));","import { state } from \"../src/state.ts\";\r\nimport \"./form.ts\"\r\nimport \"./list.ts\"\r\n\r\n","import { state } from \"../src/state.ts\";\r\nimport \"../src/wall.jpg\"\r\n\r\n\r\nclass ComponentForm extends HTMLElement{\r\n    shadow = this.attachShadow({ mode: \"open\"});\r\n\r\n    constructor(){\r\n        super();\r\n        this.render();\r\n    }\r\n    connectedCallback(){\r\n        let form = this.shadow.querySelector(\".form\");\r\n        form?.addEventListener(\"submit\", (e)=>{\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const f = e.target as any;\r\n            const input= f.querySelector(\"input\")\r\n            state.addItem(input.value)\r\n        })\r\n    }\r\n    render(){\r\n        this.shadow.innerHTML= `\r\n            <style>\r\n                form {\r\n                    width:100%;\r\n                    display:flex;\r\n                    flex-direction:row;\r\n                    gap:10px;\r\n                    justify-content: center;\r\n                }\r\n                input {\r\n                    background-color: white;\r\n                    border: 2px solid;\r\n                    border-radius:5px;\r\n                    color: black;\r\n                    width:200px;\r\n                }\r\n                input::placeholder{\r\n                    color:black;\r\n                    font-weight: bold;\r\n                    opacity:0.7; \r\n                    padding-left:5px;\r\n                }\r\n                button {\r\n                    background-color: blue;\r\n                    border-radius: 5px;\r\n                    font-weight: bold;\r\n                    color:white;\r\n                }\r\n                @media (width>960px){\r\n                    input{\r\n                        width:400px;\r\n                        height:30px;\r\n                    }\r\n                    button{\r\n                        width:100px;\r\n                        height:35px;\r\n                    }\r\n                }\r\n            </style>\r\n            <form class=\"form\">\r\n                <input type=\"text\" placeholder=\"Write a new activity\" class=\"input-activity\">\r\n                <button>ADD</button>\r\n            </form>`;\r\n    }\r\n}\r\n\r\ncustomElements.define(\"my-form\", ComponentForm);\r\n","const state = {\r\n    data: {\r\n      list: [], //[text input, checked or not, selected or not]\r\n    },\r\n    listeners: [],\r\n    getState() {\r\n      return this.data;\r\n    },\r\n    setState(newState) {\r\n       this.data=newState;\r\n       for (const cb of this.listeners){\r\n        cb();\r\n       }\r\n       console.log(\"Soy el state, he cambiado \", this.data )\r\n       console.log(document.querySelector(\"my-list\"));\r\n       \r\n\r\n    },\r\n    subscribe(callback: (any) => any) {\r\n        this.listeners.push(callback);\r\n    },\r\n    addItem(item:string) {\r\n        const cs = this.getState();\r\n        cs.list.push([item,\"pending\",\"notselected\"]);\r\n        this.setState(cs);\r\n    },\r\n  };\r\n\r\n  export {state};\r\n  ","module.exports = new __parcel__URL__(\"wall.133e2c4a.jpg\").toString();","import { state } from \"../src/state.ts\";\r\nimport delimg from \"./del_img.png\"\r\n\r\nclass ComponentList extends HTMLElement{\r\n    shadow = this.attachShadow({ mode: \"open\"});\r\n\r\n    constructor(){\r\n        super();\r\n        this.render()\r\n    }\r\n    connectedCallback(){\r\n        state.subscribe(()=>{\r\n            this.render();\r\n            this.checkStatus();\r\n            this.deletePostit();\r\n        })\r\n    }\r\n    deletePostit(){\r\n        let deleteImage = this.shadow.querySelectorAll(\".postit\");\r\n        \r\n        for (const element of deleteImage||[]) {\r\n            const indexDiv= Number(element.id);\r\n            const imgElement=element.querySelector(\"img\");\r\n            imgElement?.addEventListener(\"click\", (e)=>{\r\n                e.preventDefault();\r\n                const f = e.target as any;\r\n                const listOG= state.getState().list;\r\n                const listOG2 = listOG.filter((_, index) => index !== indexDiv);   \r\n                state.setState({\"list\": listOG2});\r\n                });\r\n            }\r\n        }\r\n    \r\n    checkStatus(){        \r\n        const list= state.getState().list;\r\n        const mylistcontainer= document.querySelector(\"my-list\");\r\n        const shadowroot= mylistcontainer?.shadowRoot;\r\n        const postitdiv= shadowroot?.querySelectorAll(\".postit\");\r\n        for (const element of postitdiv||[]) {\r\n            if (element.classList.contains(\"postit\")){   \r\n                \r\n                const checkbox= element.querySelector(\"input\");\r\n                const postitText= element.querySelector(\".postit-text\");\r\n                const deleteImage= element.querySelector(\"img\");\r\n                const indexN=element.id\r\n\r\n                if(list[indexN][1]==\"checked\"){\r\n                    checkbox!.checked=true; //Keep checked after render\r\n                }\r\n      \r\n                checkbox?.addEventListener(\"change\", (e) => {\r\n                    e.stopPropagation();\r\n\r\n                    if (checkbox.checked) {\r\n                    element.classList.add(\"checked\"); // Add class \"checked\"\r\n                    postitText?.classList.add(\"checked\"); // Add class \"checked\"\r\n                    element.classList.remove(\"pending\"); // Remove class \"pending\"\r\n                    postitText?.classList.remove(\"pending\"); // Remove class \"pending\"\r\n                    list[indexN][1]=\"checked\"\r\n                    \r\n                    } else {\r\n                        element.classList.add(\"pending\"); // Add class \"pending\"\r\n                        postitText?.classList.add(\"pending\"); // Add class \"pending\"\r\n                        element.classList.remove(\"checked\"); // Remove class \"checked\"\r\n                        postitText?.classList.remove(\"checked\"); // Remove class \"checked\"\r\n                        list[indexN][1]=\"pending\"\r\n                    }\r\n                })\r\n\r\n            function resetPostitSelection(){\r\n                for (const elem of postitdiv||[]) {\r\n                    if (elem.classList.contains(\"selected\")){   \r\n                        elem?.classList.remove(\"selected\"); \r\n                        elem?.classList.add(\"notselected\"); \r\n                        const delIMG = elem.querySelector(\"img\")\r\n                        delIMG!.style.visibility=\"hidden\"\r\n                    }\r\n                }\r\n                for (const elem of list) {\r\n                    elem[2]=\"notselected\"\r\n                }\r\n            }\r\n            element?.addEventListener(\"click\", (e) => {\r\n                e.stopPropagation();\r\n                \r\n                if (element.classList.contains(\"notselected\")){   \r\n                    resetPostitSelection()\r\n                    element?.classList.remove(\"notselected\"); \r\n                    element?.classList.add(\"selected\"); \r\n                    deleteImage!.style.visibility=\"visible\"\r\n                    list[indexN][2]=\"selected\"                    \r\n                }\r\n                else if (element.classList.contains(\"selected\")){   \r\n                    resetPostitSelection()\r\n                }\r\n            })\r\n            \r\n        }\r\n        }        \r\n    }  \r\n    render(){\r\n        const list= state.getState().list;\r\n        let n=-1\r\n        this.shadow.innerHTML= `\r\n            <style>\r\n                div.postit{\r\n                    margin:0;\r\n                    padding:0;\r\n                    width:100%;\r\n                    height:100px;\r\n                    background-color:rgb(247, 245, 159);\r\n                    border: solid black 2px;\r\n                    border-radius:15px;\r\n                    display: flex;\r\n                    justify-content: space-between;                    \r\n                    }\r\n                div.postit-text{\r\n                    width:70%;\r\n                    height:100%;\r\n                    padding:10px;\r\n                    overflow-y: auto; \r\n                    word-wrap: break-word; \r\n                    white-space: normal; \r\n                    display: block; \r\n                    margin: 0; \r\n                    line-height: 1.5;\r\n                    text-align: start;\r\n                    box-sizing:border-box;\r\n                    justify-content: center;                                        \r\n                    \r\n                }\r\n                div.postit-check-delete{\r\n                    display:flex;\r\n                    flex-direction:column;\r\n                    justify-content: space-between;                                        \r\n                    height:100%;\r\n                    width:auto;\r\n                    padding: 4%;\r\n                    box-sizing:border-box;\r\n                }\r\n                input[type=\"checkbox\"]{\r\n                    width:20px;\r\n                    height:20px;\r\n                    margin:0;\r\n                }\r\n                div.checked{\r\n                    background-color:grey;\r\n                    text-decoration: line-through;\r\n                }\r\n                div.selected{\r\n                    border: solid black 5px;\r\n                }\r\n                div.notselected{\r\n                    border: solid black 2px;\r\n                }\r\n                img.notselected{\r\n                    visibility:hidden;\r\n                }\r\n\r\n\r\n            </style>\r\n            ${list.map((element)=>{\r\n                var status=element[1]\r\n                if(n<list.length){n++}\r\n                return `\r\n                <div class=\"postit ${status} ${element[2]}\" id=\"${n}\">\r\n                    <div class=\"postit-text ${status}\" id=\"${n}\">\r\n                        ${element[0]}\r\n                    </div>\r\n                    \r\n                    <div class=\"postit-check-delete\">\r\n                        <input type=\"checkbox\">\r\n                        <img class=\"${element[2]}\" src=\"${delimg}\" alt=\"del img\" width=\"20px\" height=\"20px\">\r\n                    </div>\r\n                </div>\r\n                            `}).join(\"\")}`\r\n        \r\n        };\r\n            \r\n        \r\n    };\r\n\r\ncustomElements.define(\"my-list\", ComponentList);","module.exports = new __parcel__URL__(\"del_img.36c7340d.png\").toString();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$0b89d474933103bc$export$ca000e230c0caa3e","data","list","listeners","getState","setState","newState","cb","console","log","document","querySelector","subscribe","callback","push","addItem","item","cs","$1763b227c722b862$var$ComponentForm","HTMLElement","constructor","shadow","attachShadow","mode","render","connectedCallback","form","addEventListener","e","preventDefault","stopPropagation","input","f","target","value","innerHTML","customElements","define","$61a14b74f35e54f8$exports","$d0f18d7cc08194e8$var$ComponentList","checkStatus","deletePostit","element","deleteImage","querySelectorAll","indexDiv","Number","imgElement","listOG2","listOG","filter","_","index","mylistcontainer","shadowroot","shadowRoot","postitdiv","classList","contains","checkbox","postitText","indexN","resetPostitSelection","elem","remove","add","delIMG","style","visibility","checked","n","map","a","status","__esModule","default","join"],"version":3,"file":"index.cb7188b1.js.map"}